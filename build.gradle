import groovy.json.JsonSlurper

buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.0'
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

allprojects {
    apply plugin: 'io.qameta.allure'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'

    buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }
    }

    group 'new-tests-verifier'

    def jsonFile = new File("${projectDir}/.allure-ee/testplan.json")
    def existedTests = []
    if (jsonFile.exists()) {
        def parsedJson = new JsonSlurper().parseText(jsonFile.text)
        parsedJson.tests.selector.each { line ->
            existedTests << line
        }
    }

    repositories {
        mavenLocal()
        maven {
            url = 'https://dl.bintray.com/qameta/maven-unstable'
        }
        mavenCentral()
        jcenter()
    }
    configurations {
        agent
    }

    tasks.withType(Test) {
        useJUnitPlatform {
        }
        doFirst {
            jvmArgs "-javaagent:${configurations.agent.singleFile}"
        }
        maxParallelForks = 6
        testLogging.showStandardStreams = true
        ignoreFailures = true
        systemProperty('junit.jupiter.extensions.autodetection.enabled', 'true')
        group = "verification"
    }

    tasks.addRule('Pattern: runNewTests<ID>') { String taskName ->
        if (taskName.startsWith('runNewTests')) {
            task(taskName, type: Test) {
                doFirst {
                    filter {
                        existedTests.each {
                            excludeTestsMatching "${it}"
                        }
                    }

                }
            }
        }
    }

    task runNewTestsRepeatedly(type: Task) {
        group = "verification"
        if (existedTests.size() != 0) {
            dependsOn << (1..9).collect { "runNewTests$it" }
        } else {
            logger.warn("Verifying new tests skipped!")
        }
    }

    dependencies {
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
        implementation "org.slf4j:slf4j-simple:$ver.slf4j"
        implementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: ver.junit.platform
        implementation group: 'org.junit.platform', name: 'junit-platform-runner', version: ver.junit.platform
        implementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: ver.junit.jupiter
        implementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: ver.junit.jupiter
        implementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: ver.junit.jupiter
        implementation group: 'io.qameta.allure', name: 'allure-junit5', version: ver.allure
        compile group: 'org.aspectj', name: 'aspectjweaver', version: ver.aspectj
        agent "org.aspectj:aspectjweaver:$ver.aspectj"
    }
    clean.delete('allure-results')

    allure {
        version = ver.allure
        autoconfigure = true
        aspectjweaver = true
        configuration = 'compile'
        aspectjVersion = ver.aspectj
        resultsDir = new File('allure-results')
        reportDir = new File('build/reports/allure-report')
        useJUnit5 {
            version = ver.allure
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

